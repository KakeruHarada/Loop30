using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

[RequireComponent(typeof(NavMeshAgent))]
public class Monster_Walk : MonoBehaviour
{
    Rigidbody2D rigid2D;

    private Animator Move_Anim;

    float x, y;//移動方向
    float AnimX, AnimY;//アニメーション変数
    int number;
    float Delay=12;//開始一秒後に動かしたいため12秒に設定
    float distance = 0f;
    bool Once = true;
    bool Chase = false;

    private NavMeshAgent agent;
    public NavMeshAgent Nav;
    public GameObject Bikkuri;
    public GameObject Hatena;
    GameObject playerObj;

    void Start()
    {
        rigid2D = GetComponent<Rigidbody2D>();

        agent = GetComponent<NavMeshAgent>();
        agent.updateRotation = false;
        agent.updateUpAxis = false;

        Move_Anim = GetComponent<Animator>();
       
        //プレイヤーの年齢によってターゲットが変わる
        if (20 <= downfifty.Age && downfifty.Age < 30)
        {
            GameObject Target1 = GameObject.Find("player_20");
            playerObj = Target1;
        }
        else if (30 <= downfifty.Age && downfifty.Age < 40)
        {
            GameObject Target2 = GameObject.Find("player_30");
            playerObj = Target2;
        }
        else if (40 <= downfifty.Age && downfifty.Age < 50)
        {
            GameObject Target3 = GameObject.Find("player_40");
            playerObj = Target3;
        }
        else if (50 <= downfifty.Age && downfifty.Age < 60)
        {
            GameObject Target4 = GameObject.Find("player_50");
            playerObj = Target4;
        }
        else if (60 <= downfifty.Age && downfifty.Age < 70)
        {
            GameObject Target5 = GameObject.Find("player_60");
            playerObj = Target5;
        }
    }
    void FixedUpdate()
    {
        if (Chase == true)//プレイヤーを追いかける時
        {
            float now = Vector2.Distance(transform.position, playerObj.transform.position);//ターゲートとオブジェクトの距離
            if (distance < now)//0より離れているなら追いかける
            {
                agent.destination = playerObj.transform.position;

                Vector2? vector = new Vector2(
                    agent.destination.x - transform.position.x,
                    agent.destination.y - transform.position.y
                );

                setStateToAnimator(vector: vector != Vector2.zero ? vector : (Vector2?)null);
            }
            else 
            {
                Chase = false;
            }
        }
        else if(Chase==false)//プレイヤーを追いかけない時
        {
            rigid2D.velocity = new Vector3(x, y, 0);

            Delay += 0.1f;

            if ((int)Delay == 13)
            {
                if (Once == true)
                {
                    number = Random.Range(0, 8);
                    switch (number)
                    {
                        case 0:
                            x = -0.5f; y = 0f;
                            AnimX = -0.5f; AnimY = 0f;
                            break;
                        case 1:
                            x = -0.5f; y = -0.5f;
                            AnimX = -0.5f; AnimY = -0.5f;
                            break;
                        case 2:
                            x = -0.5f; y = 0.5f;
                            AnimX = -0.5f; AnimY = 0.5f;
                            break;
                        case 3:
                            x = 0; y = -0.5f;
                            AnimX = 0; AnimY = -0.5f;
                            break;
                        case 4:
                            x = 0.5f; y = 0f;
                            AnimX = 0.5f; AnimY = 0f;
                            break;
                        case 5:
                            x = 0.5f; y = -0.5f;
                            AnimX = 0.5f; AnimY = -0.5f;
                            break;
                        case 6:
                            x = 0.5f; y = 0.5f;
                            AnimX = 0.5f; AnimY = 0.5f;
                            break;
                        case 7:
                            x = 0f; y = 0.5f;
                            AnimX = 0f; AnimY = 0.5f;
                            break;
                    }

                    Once = false;
                }
                Move_Anim.SetFloat("AnimX", AnimX);
                Move_Anim.SetFloat("AnimY", AnimY);
            }
            if (Delay >= 18)
            {
                x = 0f; y = 0;
                Delay = 0;
                Once = true;
            }
        }
    }
    private void setStateToAnimator(Vector2? vector)
    {
        if (!vector.HasValue)
        {
            this.Move_Anim.speed = 0.0f;
            return;
        }
        this.Move_Anim.speed = 1.0f;
        this.Move_Anim.SetFloat("AnimX", vector.Value.x);
        this.Move_Anim.SetFloat("AnimY", vector.Value.y);
    }

    private void OnCollisionEnter2D(Collision2D col)
    {
        if(col.gameObject.tag=="Player")
        {
            Encount.BattleStart = true;
            Player_AgeChange.Battle = true;
            gameObject.SetActive(false);
        }
    }
    private void OnTriggerEnter2D(Collider2D col)
    {
        if (col.gameObject.tag == "Player")
        {
            Chase = true;//範囲に入ったら追いかける
            Bikkuri.SetActive(true);
            Hatena.SetActive(false);
            Invoke("BikkuriMarkDestroyMethod", 1.5f);//マークを消す
            Nav.enabled = true;
        }
    }

    private void OnTriggerExit2D(Collider2D col)
    {
        if (col.gameObject.tag == "Player")
        {
            Chase = false;//範囲から出たら止まる
            Bikkuri.SetActive(false);
            Hatena.SetActive(true);
            Invoke("HatenaMarkDestroyMethod", 2.0f);//マークを消す
            Nav.enabled = false;
            x = 0; y = 0;

            Delay = 8;//5秒後に動かしたいため8秒に設定
        }
    }

    void BikkuriMarkDestroyMethod()
    {
        Bikkuri.SetActive(false);
    }

    void HatenaMarkDestroyMethod()
    {
        Hatena.SetActive(false);
    }

}
